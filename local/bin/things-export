#!/usr/bin/env ruby
# frozen_string_literal: true

STATUSES = {
  todo: 0,
  cancelled: 2,
  done: 3,
}

TYPES = {
  task: 0,
  project: 1,
}

START = {
  inbox: 0,
  next:1,
  someday: 2,
}

source = case ARGV.fetch(0, "").chomp
when "inbox"
  "TASK.start = #{START[:inbox]}"
when "next"
  "TASK.start = #{START[:next]} AND TASK.project IS NULL OR PROJECT.start = #{START[:next]}"
when "someday"
  "TASK.start = #{START[:someday]} AND TASK.project IS NULL OR PROJECT.start = #{START[:someday]}"
when /\Athings:\/\/\/show\?id=(\w+)\z/
  "PROJECT.uuid = '#{$1}'"
else
  puts "Usage: things-export <inbox|next|someday|URI> <yaml|csv|org|logseq>"
  exit 1
end

format = ARGV[1] || "yaml"
unless ["csv", "yaml", "org", "logseq"].include?(format)
  exit 1
end

require "bundler/inline"
require "csv"
require "yaml"

gemfile do
  source "https://rubygems.org"
  gem "pry"
  gem "sqlite3"
  gem "activesupport"
end

require "active_support"
require "active_support/core_ext"

db_path = "#{Dir.home}/Library/Group Containers/JLMPQHK86H.com.culturedcode.ThingsMac/ThingsData-A57N3/Things Database.thingsdatabase/main.sqlite"
db = SQLite3::Database.new(db_path)

rows = db.execute <<~SQL
SELECT TASK.title, TASK.notes, PROJECT.title project
FROM TMTask TASK
LEFT JOIN TMTask PROJECT
ON PROJECT.type = #{TYPES[:project]} AND TASK.project = PROJECT.uuid
WHERE TASK.trashed = 0
AND TASK.type = #{TYPES[:task]}
AND TASK.status = #{STATUSES[:todo]}
AND #{source}
ORDER BY TASK.creationDate
SQL

tasks = rows.map { |(title, notes, project)|
  { title: title, notes: notes, project: project }
}

case format
when "logseq"
  tasks.each do |task|
    puts "- #{task[:title]}"
    unless String(task[:notes]) == ""
      task[:notes].split("\n").each do |l|
        puts "\t- #{l}"
      end
    end
  end
when "org"
  puts "* Things export #{Time.now}"
  tasks.each do |task|
    puts "** TODO #{task[:title]}"
    unless String(task[:notes]) == ""
      puts task[:notes].gsub(/^\*/, "-")
    end
  end
when "csv"
  puts tasks.map(&:values).map(&:to_csv)
else
  puts tasks.to_yaml
end
